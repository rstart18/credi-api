/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.crediapi.api.controller;

import com.crediapi.api.dto.ApproveApplicationResponse;
import com.crediapi.api.dto.CustomerRequest;
import com.crediapi.api.dto.CustomerResponse;
import com.crediapi.api.dto.LoanApplicationRequest;
import com.crediapi.api.dto.LoanApplicationResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T13:39:11.171769400-05:00[America/Bogota]")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * POST /api/applications/{id}/approve : Aprobar solicitud de crédito
     *
     * @param id  (required)
     * @return Solicitud aprobada exitosamente (status code 200)
     */
    @Operation(
        operationId = "approveApplication",
        summary = "Aprobar solicitud de crédito",
        responses = {
            @ApiResponse(responseCode = "200", description = "Solicitud aprobada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApproveApplicationResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/applications/{id}/approve",
        produces = { "application/json" }
    )
    
    ResponseEntity<ApproveApplicationResponse> approveApplication(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * POST /api/applications : Crear solicitud de crédito
     *
     * @param loanApplicationRequest  (required)
     * @return Solicitud creada exitosamente (status code 201)
     */
    @Operation(
        operationId = "createApplication",
        summary = "Crear solicitud de crédito",
        responses = {
            @ApiResponse(responseCode = "201", description = "Solicitud creada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoanApplicationResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/applications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<LoanApplicationResponse> createApplication(
        @Parameter(name = "LoanApplicationRequest", description = "", required = true) @Valid @RequestBody LoanApplicationRequest loanApplicationRequest
    );


    /**
     * POST /api/customers : Crear cliente
     *
     * @param customerRequest  (required)
     * @return Cliente creado exitosamente (status code 201)
     */
    @Operation(
        operationId = "createCustomer",
        summary = "Crear cliente",
        responses = {
            @ApiResponse(responseCode = "201", description = "Cliente creado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<CustomerResponse> createCustomer(
        @Parameter(name = "CustomerRequest", description = "", required = true) @Valid @RequestBody CustomerRequest customerRequest
    );


    /**
     * GET /api/customers/{id} : Obtener cliente por ID
     *
     * @param id  (required)
     * @return Cliente encontrado (status code 200)
     */
    @Operation(
        operationId = "getCustomer",
        summary = "Obtener cliente por ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Cliente encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customers/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<CustomerResponse> getCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

}
